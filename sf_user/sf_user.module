<?php
// $Id$

/**
 * @file
 * Integrates the core user object and profile module with the Salesforce API.
 */

/**
 * Implementation of hook_menu().
 */
function sf_user_menu() {
  $items['user/%user/salesforce'] = array(
    'title' => 'Salesforce',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sf_user_salesforce_form', 1),
    'access callback' => 'sf_user_salesforce_form_access',
    'access arguments' => array('sync users with salesforce'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

// Access callback for the user/%user/salesforce menu item.
function sf_user_salesforce_form_access() {
  return user_access('sync users with salesforce') and salesforce_api_fieldmap_options('user');
}

/**
 * Implementation of hook_perm().
 */
function sf_user_perm() {
  return array('sync users with salesforce');
}

/**
 * Implementation of hook_form_alter().
 */
function sf_user_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'salesforce_api_settings_form') {
    $form['sf_user'] = array(
      '#type' => 'fieldset',
      '#title' => t('User integration'),
      '#description' => t('Placeholder for any user integration settings.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -1,
    );
  }
}

/**
 * Implementation of hook_user().
 */
function sf_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      $account->salesforce = salesforce_api_id_load('user', $account->uid);
      break;

    case 'delete':
      db_query('DELETE FROM {salesforce_object_map} WHERE drupal_type = "user" AND oid = %d', $account->uid);
      break;

    case 'insert':
    case 'update':
      // When importing *from* Salesforce, don't export *back* to Salesforce.
      if (isset($account->sf_user_skip_export) || isset($edit['sf_user_skip_export'])) {
        break;
      }
      $salesforce = array('fieldmap' => null, 'sfid' => null);
      if ($account->uid) {
        $salesforce = salesforce_api_id_load('user', $account->uid);
      }
      
      if (empty($salesforce['fieldmap'])) {
        // Detect whether or not this should be an auto-update for this user
        $result = db_query("SELECT fieldmap FROM {salesforce_field_map} WHERE drupal = 'user' AND automatic = 1");
        $map = db_fetch_object($result);
        if (!$map) {
          break;
        }
        // Use the first fieldmap.
        $salesforce['fieldmap'] = $map->fieldmap;

        // Check if there is more than one fieldmap in the result.
        if (user_access('administer salesforce') and db_fetch_object($result)) {
          drupal_set_message(t('Warning: more than one "automatic" salesforce mapping detected. Used fieldmap @map.', array('@map' => $map)), 'error');
        }
      }

      sf_user_export($account->uid, $salesforce['fieldmap'], $salesforce['sfid']);
      break;
  }
}

/**
 * Implementation of hook_fieldmap_objects().
 */
function sf_user_fieldmap_objects($type) {
  $objects = array();

  // Define the data fields available for Drupal objects.
  if ($type == 'drupal') {
    $objects['user'] = array(
      'label' => t('User account'),
      'fields' => array(
        'uid' => array('label' => t('User ID'), 'type' => SALESFORCE_FIELD_SOURCE_ONLY),
        'name' => array('label' => t('Username'), 'type' => SALESFORCE_FIELD_REQUIRED),
        'mail' => array('label' => t('E-mail address'), 'type' => SALESFORCE_FIELD_REQUIRED),
        'created' => array('label' => t('Created timestamp')),
        'access' => array('label' => t('Last access timestamp')),
        'login' => array('label' => t('Last login timestamp')),
        'status' => array('label' => t('Account status')),
      ),
    );

    // Add profile fields to the user object if the module is enabled.
    if (module_exists('profile')) {
      // Load all the profile fields from the database.
      $result = db_query("SELECT fid, name, title, category FROM {profile_fields} ORDER BY category, weight");

      // Loop through the fields and add them to the Drupal user object.
      while ($field = db_fetch_array($result)) {
        $objects['user']['fields'][$field['name']] = array(
          'label' => t('@category: @title', array('@category' => $field['category'], '@title' => $field['title'])),
          'group' => t('Profile fields'),
        );
      }
    }
  }

  return $objects;
}

// Displays the Salesforce synchronization form.
function sf_user_salesforce_form(&$form_state, $account) {
  // Fail out if the user didn't exist!
  if (!$account->uid) {
    drupal_not_found();
  }

  // Set the user page title.
  drupal_set_title(check_plain($account->name));

  $form = array();

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );

  // Display an export button if the user hasn't been exported before.
  if (!$account->salesforce['sfid']) {
    $form['export'] = array(
      '#type' => 'fieldset',
      '#title' => t('Export user to Salesforce'),
      '#description' => t('This user may be exported to Salesforce using any fieldmap listed below.'),
    );

    // Get an array of fieldmaps that export users of this type to Salesforce.
    $options = salesforce_api_fieldmap_options('user');

    // Add the export form
    $form['export']['fieldmap'] = array(
      '#type' => 'select',
      '#title' => t('Export fieldmap'),
      '#options' => $options,
    );

    $form['export']['export_user'] = array(
      '#type' => 'submit',
      '#value' => t('Export user'),
    );
  }
  else {
    // Otherwise add synchronization information.
    $form['sfid'] = array(
      '#type' => 'value',
      '#value' => $account->salesforce['sfid'],
    );
    $form['fieldmap'] = array(
      '#type' => 'value',
      '#value' => $account->salesforce['fieldmap'],
    );

    // Retrieve the object from Salesforce.
    $sf = salesforce_api_connect();
    if (!$sf) {
      drupal_set_message(t('Unable to connect to Salesforce using <a href="!url">current credentials</a>.', array('!url' => url(SALESFORCE_PATH_ADMIN))));
      return array();
    }

    $sf_data = $sf->retrieve(array($account->salesforce['sfid']), $account->salesforce['fieldmap']);

    // Load the fieldmap data.
    $map = salesforce_api_fieldmap_load($account->salesforce['fieldmap']);

    // Load the object definitions.
    $drupal_object_definition = salesforce_api_fieldmap_objects_load('drupal', $map['drupal']);
    $sf_field_definition = salesforce_api_fieldmap_objects_load('salesforce', $map['salesforce']);

    $header = array(t('Field name'), t('Drupal user value'), t('Salesforce @type value', array('@type' => salesforce_api_fieldmap_object_label('salesforce', $map['salesforce']))));
    $rows = array();

    foreach ($map['fields'] as $sf_fieldname => $drupal_fieldname) {
      if (isset($drupal_object_definition['fields'][$drupal_fieldname]['export'])) {
        $drupal_field_export_handler = $drupal_object_definition['fields'][$drupal_fieldname]['export'];
        $drupal_field_definition = $drupal_object_definition['fields'][$drupal_fieldname];
        $sf_field_definition = $sf_object_definition['fields'][$sf_fieldname];
        $drupal_value = $drupal_field_export_handler($account, $drupal_fieldname, $drupal_field_definition, $sf_field_definition);
      }
      elseif (isset($account->$drupal_fieldname)) {
        $drupal_value = $account->$drupal_fieldname;
      }
      else {
        $drupal_value = '';
      }

      $rows[] = array(
        $sf_field_definition['fields'][$sf_fieldname]['label'],
        $drupal_value,
        $sf_data->$sf_fieldname,
      );
    }

    $form['mapped'] = array(
      '#type' => 'fieldset',
      '#title' => t('Mapped field values'),
      '#description' => t('These fields have been mapped through <a href="!url">fieldmap @index</a>.', array('!url' => url(SALESFORCE_PATH_FIELDMAPS .'/'. $account->salesforce['fieldmap'] .'/edit'), '@index' => $account->salesforce['fieldmap'])),
    );
    $form['mapped']['fieldmap_values'] = array(
      '#value' => theme('table', $header, $rows),
    );

    $form['mapped']['export_values'] = array(
      '#type' => 'submit',
      '#value' => t('Export changes to Salesforce'),
      '#attributes' => array('class' => 'sf-confirm'),
    );
    $form['mapped']['import_values'] = array(
      '#type' => 'submit',
      '#value' => t('Import changes from Salesforce'),
      '#attributes' => array('class' => 'sf-confirm'),
    );

    // Create a table for the unmapped fields.
    $header = array(t('Field name'), t('Salesforce @type value', array('@type' => salesforce_api_fieldmap_object_label('salesforce', $map['salesforce']))));
    $rows = array();

    foreach ((array) $sf_data as $key => $value) {
      if (!isset($map['fields'][$key]) && isset($sf_field_definition['fields'][$key])) {
        $rows[] = array(
          $sf_field_definition['fields'][$key]['label'],
          $value,
        );
      }
    }

    if (count($rows) > 0) {
      $form['unmapped'] = array(
        '#type' => 'fieldset',
        '#title' => t('Unmapped fields'),
        '#description' => t('These fields are available on Salesforce but are not currently mapped through the fieldmap used for this user. Some of these values may only be available when importing from Salesforce.'),
      );
      $form['unmapped']['unmmaped_fields'] = array(
        '#value' => theme('table', $header, $rows),
      );
    }

    $rows = array();

    foreach (salesforce_api_fieldmap_system_fields() as $key => $value) {
      $rows[] = array(
        $value['label'],
        $sf_data->$key,
      );
    }

    $form['system'] = array(
      '#type' => 'fieldset',
      '#title' => t('System fields'),
      '#description' => t('These fields provide additional system information about the Salesforce object but cannot be exported to Salesforce.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['system']['system_fields'] = array(
      '#value' => theme('table', $header, $rows),
    );

    $form['raw'] = array(
      '#type' => 'fieldset',
      '#title' => t('Raw data'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['raw']['data'] = array(
      '#value' => '<pre>'. print_r($sf_data, TRUE) .'</pre>',
    );
  }

  return $form;
}

function sf_user_salesforce_form_submit($form, &$form_state) {
  switch ($form_state['values']['op']) {
    // Export the user to Salesforce.
    case t('Export user'):
      if (sf_user_export($form_state['values']['uid'], $form_state['values']['fieldmap'])) {
        drupal_set_message(t('User successfully exported to Salesforce.'));
      }
      else {
        drupal_set_message(t('An error occurred while exporting the user to Salesforce.  Check the watchdog for more information.'), 'error');
      }
      break;

    // Export changes to Salesforce.
    case t('Export changes to Salesforce'):
      if (sf_user_export($form_state['values']['uid'], $form_state['values']['fieldmap'], $form_state['values']['sfid'])) {
        drupal_set_message(t('Changes successfully exported to Salesforce.'));
      }
      else {
        drupal_set_message(t('An error occurred while exporting the changes to Salesforce.  Check the watchdog for more information.'), 'error');
      }
      break;

    // Import changes from Salesforce.
    case t('Import changes from Salesforce'):
      if (sf_user_import($form_state['values']['sfid'], $form_state['values']['fieldmap'], $form_state['values']['uid'])) {
        drupal_set_message(t('The user has been updated with values from Salesforce.'));
      }
      else {
        drupal_set_message(t('An error occurred while importing the changes from Salesforce.  Check the watchdog for more information.'), 'error');
      }

      break;
  }
}

/**
 * Exports a user to Salesforce using the specified fieldmap and stores the
 *   ID of the Salesforce object for the user.
 *
 * @param $uid
 *   The uid of the user to export.
 * @param $fieldmap
 *   The index of the fieldmap to use to create the export object.
 * @param $sfid
 *   The Salesforce ID of the object you want to update.  If left NULL, a new
 *     object will be created at Salesforce.
 * @return
 *   TRUE or FALSE indicating the success of the operation.
 */
function sf_user_export($uid, $fieldmap, $sfid = NULL) {
  // Attempt to connect to Salesforce.
  $sf = salesforce_api_connect();
  if (!$sf) {
    drupal_set_message(t('Unable to connect to Salesforce using <a href="!url">current credentials</a>.', array('!url' => url(SALESFORCE_PATH_ADMIN))));
    return FALSE;
  }

  // Load the user.
  $account = user_load(array('uid' => $uid));

  // Create an object for export based on the specified fieldmap.
  $object = salesforce_api_fieldmap_export_create($fieldmap, $account);

  // Load the fieldmap so we can get the object name.
  $map = salesforce_api_fieldmap_load($fieldmap);
  
  if (empty($sfid)) {
    // Look for any matching records which we might want to update instead of creating duplicates.
    $matches = salesforce_api_search_for_duplicates('export', 'user', $account, $fieldmap);
    if (!empty($matches)) {
      $object->Id = reset($matches);
    }
  } else {
    $object->Id = $sfid;
  }

  // TODO: Salesforce's PHP Toolkit's implementation of "upsert" for Enterprise client 
  // is BROKEN -- it always tries to update "Contact" instead of accepting a "type" 
  // parameter. Until it is fixed, we have to update/create.
  //
  // Upsert creates a new object if object->Id is empty, otherwise updates an existing object.
  // $response = $sf->client->upsert('Id', array($object));

  if (empty($object->Id)) {
    $response = $sf->client->create(array($object), $map['salesforce']);
  } else {
    $response = $sf->client->update(array($object), $map['salesforce']);
  }

  // If the export was successful...
  if ($response->success) {
    if (empty($account->salesforce['sfid'])) {
      // Store the Salesforce ID for the user and return TRUE.
      salesforce_api_id_save('user', $uid, $response->id, $fieldmap);
    }

    return TRUE;
  }
  else {
    // Otherwise log the error and return FALSE.
    drupal_set_message('<pre>' . print_r($response, TRUE) . '</pre>', 'error');

    return FALSE;
  }
}

/**
 * Imports data from Salesforce into a user.
 *
 * @param $sfid
 *   The Salesforce ID of the object from which you want to import.
 * @param $fieldmap
 *   The index of the fieldmap to use to create the export object.
 * @param $uid
 *   The uid of the user to update.  If left NULL, a new user will be created.
 * @return
 *   The uid of the imported user or FALSE on failure.
 */
function sf_user_import($sfid, $fieldmap, $uid = NULL) {
  // Retrieve the object from Salesforce.
  $sf = salesforce_api_connect();
  if (!$sf) {
    drupal_set_message(t('Unable to connect to Salesforce using <a href="!url">current credentials</a>.', array('!url' => url(SALESFORCE_PATH_ADMIN))));
    return FALSE;
  }

  $sf_data = $sf->retrieve(array($sfid), $fieldmap);

  // Return FALSE if the object data was not found at Salesforce.
  if (empty($sf_data)) {
    return FALSE;
  }

  // Load the fieldmap data.
  $map = salesforce_api_fieldmap_load($fieldmap);

  // Load the object definitions.
  $drupal_object_definition = salesforce_api_fieldmap_objects_load('drupal', $map['drupal']);
  $salesforce_object_definition = salesforce_api_fieldmap_objects_load('salesforce', $map['salesforce']);

  // If a user was specified, attempt to load it.
  $account = user_load(array('uid' => $uid));
  if (empty($uid) || empty($account)) {
    // Look for any matching records which we might want to update instead of creating duplicates.
    $matches = salesforce_api_search_for_duplicates('import', 'user', $sf_data, $fieldmap);
    if (!empty($matches)) {
      $account->uid = reset($matches);
    }
  }

  // If the user exists, simply update the existing user.
  if ($account->uid) {
    // Loop through the fields on the fieldmap.
    foreach ($map['fields'] as $sf_fieldname => $drupal_fieldname) {
      // If a handler is specified for importing a value from Salesforce.
      if (isset($drupal_object_definition['fields'][$drupal_fieldname]['import'])) {
        $drupal_field_import_handler = $drupal_object_definition['fields'][$drupal_fieldname]['import'];
        $drupal_field_definition = $drupal_object_definition['fields'][$drupal_fieldname];
        $sf_field_definition = $salesforce_object_definition['fields'][$sf_fieldname];
        // Get the value for the field from the handler function.
        $change = $drupal_field_import_handler($account, $drupal_fieldname, $drupal_field_definition, $sf_data, $sf_fieldname, $sf_field_definition);

        $changes = array_merge($changes, $change);
      }
      // Otherwise set the field on the export object to the value of the source
      // field if it's present on the source object.
      elseif (isset($sf_data->$sf_fieldname)) {
        if ($account->$drupal_fieldname != $sf_data->$sf_fieldname) {
          $changes[$drupal_fieldname] = $sf_data->$sf_fieldname;
        }
      }
    }

    //drupal_set_message('<pre>'. print_r($changes, TRUE) .'</pre>');
    // We don't want to trigger an export while we're running import.
    // sf_user_skip_export is a flag to tell hook_user not to export this object.
    $account->sf_user_skip_export = TRUE;
    $changes['sf_user_skip_export'] = TRUE;
    $account = user_save($account, $changes);
    unset($account->sf_user_skip_export);
  }

  return $account->uid;
}
