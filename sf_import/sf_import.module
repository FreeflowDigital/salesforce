<?php

define('SALESFORCE_PATH_ADMIN_IMPORT', SALESFORCE_PATH_ADMIN . '/import');

/**
 * Implements hook_menu().
 */
function sf_import_menu() {

  $items[SALESFORCE_PATH_ADMIN_IMPORT] = array(
    'title' => 'Import',
    'description' => 'Configure settings for regular imports of data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sf_import_settings_form'),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_LOCAL_TASK,
  );

  $items[SALESFORCE_PATH_ADMIN_IMPORT . '/create'] = array(
    'title' => 'Batch Import',
    'description' => 'Create a one-time batch import of Salesforce data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sf_import_create'),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_LOCAL_TASK,
  );

  $items[SALESFORCE_PATH_ADMIN_IMPORT . '/overview'] = array(
    'title' => 'Import Settings',
    'access arguments' => array('administer salesforce'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function sf_import_help($path, $arg) {
  switch ($path) {
    case 'admin/config/salesforce/import':
      return '<p>' . t('Select the Fieldmaps you would like to use for regular
      imports of data from Salesforce to Drupal. <strong>This feature requires
      a properly configured cron job.</strong> Once fieldmaps have been selected,
       additional information regarding pending imports is available, along with
       the ability to manually trigger imports. <br />You can also run a one-time
        batch import of data from Salesforce to Drupal by visiting the "Batch Import" page.') . '</p>';
  }
}

/**
 * Import Settings form.
 */
function sf_import_settings_form($form, $form_state) {
  $form = array();

  $form['overview'] = array(
    '#value' => 'Ongoing imports from Salesforce are possible by configuring the fieldmap(s) defined below. On each cron run, Salesforce Import will check for updated records and import them into Drupal.',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );

  // Show the time of last import
  $last_import = variable_get('sf_import_queue_last_import', NULL);
  if ($last_import) {
    $date = date('M j Y H:i:s', $last_import);
    $form['last_import'] = array(
      '#value' => '<strong>Last import: </strong>' . $date . ' <br /><strong>Number of items imported:</strong> '
        . variable_get('sf_import_queue_import_count', 0) . '<br /><strong>Number of items processed:</strong> ' . variable_get('sf_import_queue_processed_count', 0),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }

  // Load the fieldmaps
  $fieldmaps = salesforce_api_salesforce_fieldmap_load_all();
  $maps = array();
  foreach ($fieldmaps as $map) {
    $maps[$map->name] = $map->name;
    if ($map->description) {
      $maps[$map->name] .= '<em> (' . $map->description . ')</em>';
    }
  }

  $form['sf_import_fieldmaps'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Fieldmaps'),
    '#description' => t('Select which fieldmaps should be used for ongoing imports from Salesforce to Drupal.'),
    '#options' => $maps,
    '#default_value' => variable_get('sf_import_fieldmaps', array(NULL)),
  );

  // For fieldmaps that have import enabled, show some information about them

  $import_maps = variable_get('sf_import_fieldmaps', array());
  $active_import_maps = array();
  if ($import_maps) {
    foreach ($import_maps as $import_map_key => $import_map_value) {
      if ($import_map_value !== 0) {
        $map = salesforce_api_salesforce_fieldmap_load($import_map_key);
        $start = variable_get('sf_import_queue_last_import', REQUEST_TIME);
        $end = REQUEST_TIME;
        // salesforce_api_get_updated requires the query window to be at least 1 minute
        if ($end - $start < 60) {
          $start = $end - 61;
        }
        $sf_updated = salesforce_api_get_updated($map->salesforce, $start, $end);

        $form[$import_map_key . '_information'] = array(
          '#type' => 'fieldset',
          '#title' => t('Information for fieldmap <em>' . check_plain($import_map_key) . '</em>'),
          '#description' => t('Number of updated records and timestamp of last update, if information is available.'),
          '#collapsible' => TRUE,
          '#collapsed' => $sf_updated ? FALSE : TRUE,
        );
        if ($sf_updated) {
          $form[$import_map_key . '_information']['pending'] = array(
            '#value' => '<em>' . count($sf_updated->ids) . '</em> updated record(s) in Salesforce pending import.<br />Newest object in Salesforce dated <em>' . $sf_updated->latestDateCovered . '.</em>',
            '#prefix' => '<div>',
            '#suffix' => '</div>',
          );
          $active_import_maps[$import_map_key] = $import_map_value;
          // Show table of SFIDs pending import
          $rows = array();
          $header = array('Salesforce ID');
          $sf_data = $sf_updated->ids;

          foreach ($sf_data as $key => $sfid) {
            $rows[] = array($sfid);
          }

          $form[$import_map_key . '_information']['pending']['data'] = array(
            '#value' => theme_table($header, $rows),
            '#prefix' => '<div>',
            '#suffix' => '</div>',
          );
        }
        else {
          $form[$import_map_key . '_information']['nodata'] = array(
            '#value' => 'There are no pending updates for this fieldmap.',
            '#prefix' => '<div>',
            '#suffix' => '</div>',
          );
        }
      }
    }

    // Allow the user to import records for fieldmaps that have updates
    if ($active_import_maps) {
      $form['process_updates'] = array(
        '#type' => 'fieldset',
        '#title' => t('Process updates for all fieldmaps'),
        '#description' => t('Query Salesforce for updates for all fieldmaps and import updated data.'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['process_updates']['get_updates'] = array(
        '#type' => 'submit',
        '#value' => t('Import updates'),
      );
      $form['#submit'][] = 'sf_import_settings_form_submit';
    }
  }
  return system_settings_form($form);
}

/**
 * Submit handler for the settings page.
 */
function sf_import_settings_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'Import updates') {
    if (variable_get('sf_import_fieldmaps', array())) {
      $updates = _sf_import_get_updated_records();
      $processed = _sf_import_process_records();
      if (user_access('administer salesforce')) {
        if ($updates) {
          drupal_set_message(t('@updates record(s) imported from Salesforce.'), array('@updates' => count($updates)));
        }
        if ($processed) {
          drupal_set_message(t('@processed imported record(s) processed.'), array('@processed' => count($processed)));
        }
        drupal_set_message(t('Please allow one minute to refresh this page for accurate information about newly updated records in Salesforce.'));
      }
    }
  }
}

/**
 * Page callback for admin/settings/salesforce/import/create
 */
function sf_import_create($form, &$form_state, $ongoing = 0) {

  $form = $options = array();

  $fieldmaps = salesforce_api_salesforce_fieldmap_load_all();
  foreach ($fieldmaps as $map) {
    $edit = l('edit', SALESFORCE_PATH_FIELDMAPS . '/' . $map->name . '/edit', array('query' => array('destination' => drupal_get_destination())));
    $options[$map->name] =
      salesforce_api_fieldmap_object_label('salesforce', $map->salesforce) . ' => ' .
      salesforce_api_fieldmap_object_label('drupal', $map->drupal) . ' - <em>' . $map->description . '</em>' . ' (' . $edit . ')';
  }

  // Add a message if no objects have been mapped.
  if (empty($options)) {
    drupal_set_message(t('You have not yet defined any fieldmaps.'), 'error');
    return;
  }

  // Admin should select a mapping to use for the import.
  $form['label'] = array(
    '#type' => 'markup',
    '#value' => '<h2>' . ($ongoing ? t('Create Ongoing Import') : t('Perform One-time Import')) . '</h2>',
  );

  $form['fieldmap'] = array(
    '#title' => t('Please choose a fieldmap to use for the import'),
    '#description' => t('Salesforce Object => Drupal Content Type'),
    '#type' => 'radios',
    '#required' => TRUE,
    '#options' => $options,
  );

  $form['extra-options'] = array(
    '#title' => t('Extra Options'),
    '#type' => 'fieldset',
    '#collasible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['extra-options']['extra-linked'] = array(
    '#title' => t('Link nodes to Salesforce objects on import?'),
    '#description' => t('Links the imported Drupal node to the salesforce object allowing the ability to issue manual syncronization of data to and from Drupal and Salesforce business objects. Linking also enables the ability to use node reference to relate business objects in Drupal (like accounts to contacts).'),
    '#type' => 'checkbox',
  );

  $form['extra-options']['extra-where'] = array(
    '#title' => t('Conditions'),
    '#description' => t("<strong>Advanced</strong>: Enter any additional SOQL \"Where\" conditions to use for this import query, e.g.<br /><code>Type != 'One-to-One Individual'</code><br />Learn more here: <a href='http://www.salesforce.com/us/developer/docs/api/Content/sforce_api_calls_soql_select_conditionexpression.htm' target='_blank'>Salesforce.com SOQL Where clause</a>"),
    '#type' => 'textarea',
  );

  $form['ongoing'] = array(
    '#type' => 'value',
    '#value' => $ongoing,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function sf_import_create_submit($form, &$form_state, $ongoing = 0) {
  // Create a new batch job to do the import

  $extra_options = array();
  $extra_options['extra-linked'] = $form_state['values']['extra-linked'];
  $extra_options['extra-where'] = $form_state['values']['extra-where'];

  $batch = sf_import_create_batchjob($form_state['values']['fieldmap'], $extra_options);
  batch_set($batch);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function sf_import_create_batchjob($fieldmap, $extra = NULL) {
  $params = array(
    'fieldmap_key' => $fieldmap,
    'extra' => $extra,
  );
  return array(
    'title' => t('Importing'),
    'operations' => array(
      array('sf_import_batchjob', $params),
    ),
    'finished' => 'sf_import_batchjob_finalize',
  );
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function sf_import_batchjob_finalize($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Import complete.'));
    if (count($results) > 0) {
      drupal_set_message(theme('item_list', array('items' => $results)));
    }
  }
  else {
    drupal_set_message(t('Import failed.'));
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function sf_import_batchjob($fieldmap_key, $extra, &$context) {
  // Always log in to salesforce.
  if (empty($context['sandbox'])) {
    // Do this on the first run.
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $map = salesforce_api_fieldmap_load( $fieldmap_key );
    if (empty($map)) {
      $context['finished'] = 1;
      $context['message'] = t('Invalid fieldmap.');
      return;
    }
    // Load the fieldmap.
    $context['sandbox']['salesforce']['map'] = $map;

    // Load the object definitions.
    $context['sandbox']['salesforce']['drupal_object'] =
      salesforce_api_fieldmap_objects_load('drupal', $map->drupal);
    // $context['sandbox']['salesforce']['salesforce_object'] =
    //   salesforce_api_fieldmap_objects_load('salesforce', $map['salesforce']);
    $result = db_query('SELECT oid, sfid FROM {salesforce_object_map} WHERE name = :name', array(':name' => $map->name));
    while ($row = $result->fetchAssoc()) {
      $context['sandbox']['salesforce']['existing'][$row['sfid']] = $row['oid'];
    }

    $soql = 'SELECT '
      // "Id" must be included in the SOQL query.
      . implode(', ', array_keys($map->fields + array('Id' => '')))
      . ' FROM ' . $map->salesforce;
    if (!empty($extra['extra-where'])) {
      $soql .= ' WHERE ' . $extra['extra-where'];
    }
    try {
      $sf = salesforce_api_connect();
      $context['sandbox']['salesforce']['query'] = $query = $sf->client->query($soql);
    }
    catch (Exception $e) {
      $context['finished'] = 1;
      $context['message'] = $e->getMessage();
      return;
    }
    if (empty($query->records)) {
      $context['finished'] = 1;
      $context['message'] = 'Empty resultset returned from Salesforce query.';
    }
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['position'] = 0;
    $context['sandbox']['imported'] = 0;
    $context['finished'] = 0;
  }

  $map = $context['sandbox']['salesforce']['map'];
  $query = $context['sandbox']['salesforce']['query'];
  if (array_key_exists('existing', $context['sandbox']['salesforce'])) {
    $existing = $context['sandbox']['salesforce']['existing'];
  }
  else {
    $existing = '';
  }
  $drupal_object = $context['sandbox']['salesforce']['drupal_object'];
  $pos = $context['sandbox']['position'];
  $query_array = get_object_vars($query);
  $size = $query_array['size'];

  if (!$query_array['done'] && !empty($query_array['queryLocator']) && !isset($query_array['records'][$pos])) {
    try {
      $sf = salesforce_api_connect();
      $context['sandbox']['salesforce']['query'] = $query = $sf->client->queryMore($query_array['queryLocator']);
      $query_array = get_object_vars($query);
      $context['sandbox']['position'] = $pos = key($query_array['records']);
    }
    catch (Exception $e) {
      $context['finished'] = 1;
      $context['message'] = $e->getMessage();
      return;
    }
  }

  // Do ONE record at a time so we don't go over the max execution limit.
  $record = $query_array['records'][$pos];
  if ($context['sandbox']['progress'] >= $size || empty($record)) {
    $context['finished'] = 1;
    $context['message'] = 'Imported ' . $context['sandbox']['imported'] . ' Salesforce records.';
    return;
  }
  // For some reason, writing the SObject to session data destroys the object.
  // Cast it to an array to recover the corrected object.
  if (!is_array($record)) {
    $record = get_object_vars($record);
  }
  $created = !isset($existing[$record['Id']]);
  $type = $map->drupal;
  // "node" mappings are like "node_contenttype".
  // others are like "user", "uc_order", etc.
  if (strpos($type, 'node_') === 0) {
    $type = 'node';
  }

  $function = 'sf_' . $type . '_import';

  if (function_exists($function)) {
    $oid = $function($record, $map->name, $existing[$record['Id']], $extra);
  }
  else {
    $context['finished'] = TRUE;
    $context['success'] = FALSE;
    $context['results'][] = 'Could not find import function ' . $function;
  }

  if ($oid) {
    $context['results'][] = ($created ? 'Created' : 'Updated') . ' ' . l($type . ' ' . $oid, $type . '/' . $oid);
    $context['sandbox']['imported']++;
  }

  $context['sandbox']['progress']++;
  $context['sandbox']['position']++;
  $context['finished'] = $context['sandbox']['progress'] / $size;
}

/**
 * Implements hook_cron().
 */
function sf_import_cron() {
  if ($sf = salesforce_api_connect()) {
    // Get new records from Salesforce since last time cron was run
    _sf_import_get_updated_records();
    // Process the records (insert/update records)
    _sf_import_process_records();
  }
}

/**
 * Loops through fieldmaps with automatic create/update settings and imports
 * new records since the last time the import process was run.
 */
function _sf_import_get_updated_records() {
  $fieldmaps = variable_get('sf_import_fieldmaps', salesforce_api_salesforce_fieldmap_load_all());
  $active_fieldmaps = array();
  foreach ($fieldmaps as $map_key => $map_value) {
    if ($map_value !== 0) {
      $active_fieldmaps[$map_key] = $map_value;
    }
  }

  if (!$active_fieldmaps) {
    return FALSE;
  }

  $records = array();
  // Get updated and/or deleted items for each fieldmap and store in sf_import_queue
  // Start date is newest date of SFID stored in sf_import_queue, end date is time()
  foreach ($active_fieldmaps as $map) {
    $map = salesforce_api_salesforce_fieldmap_load($map);
    $sql = "SELECT time FROM {sf_import_queue} ORDER BY time DESC LIMIT 1";
    $start = db_query($sql)->fetchField();
    if (!$start) {
      // If $start isn't set, then set the start to an hour back from the current time
      $start = variable_get('sf_import_queue_last_import', REQUEST_TIME - 3600);
    }

    $end = REQUEST_TIME;

    // If the last time we checked for updated records was within the last
    // hour, then push the $start value back an hour.
    // This helps enusre that we don't skip over any updated records
    if ($end - $start < 3600) {
      $start = $start - 3600;
    }

    // Set the time that the last import took place
    variable_set('sf_import_queue_last_import', REQUEST_TIME);
    if ($updates = salesforce_api_get_updated($map->salesforce, $start, $end)) {
      $update_sfids = $updates->ids;
      foreach ($update_sfids as $sfid) {
        $exists = db_query("SELECT sfid FROM {sf_import_queue} WHERE sfid = :sfid", array(':sfid' => $sfid))->fetchField();
        if (!$exists) {
          $object->time = REQUEST_TIME;
          $object->sfid = $sfid;
          $object->fieldmap = $map->name;
          $ret = drupal_write_record('sf_import_queue', $object);
        }
        $records[] = array($sfid, $map->name, REQUEST_TIME);
      }
    }
  }
  if (count($records) > 0) {
    variable_set('sf_import_queue_import_count', count($records));
    return $records;
  }
  else {
    variable_set('sf_import_queue_import_count', 0);
    return FALSE;
  }
}

/**
 * Processes items in the sf_import_queue table.
 */
function _sf_import_process_records() {
  // Process sf_import_queue items
  $fieldmaps = salesforce_api_salesforce_fieldmap_load_all();
  $records = array();
  $result = db_query("SELECT sfid, fieldmap FROM {sf_import_queue}");
  foreach ($result as $sfids) {
    $fieldmap = $sfids->fieldmap;
    $type = $fieldmaps[$fieldmap]->drupal;
    // "node" mappings are like "node_contenttype".
    // others are like "user", "uc_order", etc.
    if (strpos($type, 'node_') === 0) {
      $type = 'node';
    }

    $function = 'sf_' . $type . '_import';
    $drupal_id = salesforce_api_get_id_with_sfid($sfids->sfid, $type);
    if (function_exists($function)) {
      $oid = $function($sfids->sfid, $sfids->fieldmap, $drupal_id);
      $records[] = array($sfids->sfid, $oid, $sfids->fieldmap);
    }
    db_delete('sf_import_queue')
      ->condition('sfid', $sfids->sfid)
      ->execute();
  }
  if (count($records) > 0) {
    variable_set('sf_import_queue_processed_count', count($records));
    return $records;
  }
  else {
    variable_set('sf_import_queue_processed_count', 0);
    return FALSE;
  }
}
