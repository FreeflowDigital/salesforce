<?php
// $Id$

/**
 * @file
 * Defines an API that enables modules to interact with the Salesforce server.
 *
 * 1. Get your security token.
 * 2. Get the Toolkit.
 * 3. Download your WSDL.
 */


// Define directory paths for the Toolkit and WSDL files.
define('SALESFORCE_DIR', drupal_get_path('module', 'salesforce_api'));
define('SALESFORCE_DIR_TOOLKIT', SALESFORCE_DIR .'/toolkit');
define('SALESFORCE_DIR_SOAPCLIENT', SALESFORCE_DIR_TOOLKIT .'/soapclient');
define('SALESFORCE_DIR_WSDL', SALESFORCE_DIR .'/wsdl');

// Define Drupal paths for various parts of the Salesforce UI.
define('SALESFORCE_PATH_ADMIN', 'admin/settings/salesforce');
define('SALESFORCE_PATH_FIELDMAPS', 'admin/settings/salesforce/fieldmap');
define('SALESFORCE_PATH_DEMO', 'admin/settings/salesforce/demo');

// Define field importing requirements.
// TODO: I believe we need to use bitwise operators instead.
// Reference this tutorial - http://www.litfuel.net/tutorials/bitwise.htm
define('SALESFORCE_FIELD_OPTIONAL', 0);
define('SALESFORCE_FIELD_REQUIRED', 1);
define('SALESFORCE_FIELD_SOURCE_ONLY', 2);

// Define reporting levels for watchdog messages.
define('SALESFORCE_LOG_NONE', 0);
define('SALESFORCE_LOG_SOME', 5);
define('SALESFORCE_LOG_ALL', 10);


/**
 * Implementation of hook_menu().
 */
function salesforce_api_menu() {
  $items[SALESFORCE_PATH_ADMIN] = array(
    'title' => 'Salesforce',
    'description' => 'Administer settings related to your Salesforce integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_api_settings_form'),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_api.admin.inc',
  );
  $items[SALESFORCE_PATH_ADMIN .'/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[SALESFORCE_PATH_ADMIN .'/demo'] = array(
    'title' => 'Test/Demo',
    'page callback' => 'salesforce_api_demo',
    'access arguments' => array('administer salesforce'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'salesforce_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS] = array(
    'title' => 'Fieldmaps',
    'description' => 'Administer fieldmap relationships between Drupal objects and Salesforce objects.',
    'page callback' => 'salesforce_api_fieldmap_admin',
    'access arguments' => array('administer salesforce'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'salesforce_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer salesforce'),
    'weight' => 0,
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/add'] = array(
    'title' => 'Add',
    'description' => 'Create a new fieldmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_api_fieldmap_add_form'),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'salesforce_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/%/edit'] = array(
    'title' => 'Edit fieldmap',
    'description' => 'Edit an existing fieldmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_api_fieldmap_edit_form', 4),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_CALLBACK,
    'file' => 'salesforce_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/%/clone'] = array(
    'title' => 'Clone a fieldmap',
    'description' => 'Clone an existing fieldmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_api_fieldmap_clone_form', 4),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_CALLBACK,
    'file' => 'salesforce_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/%/delete'] = array(
    'title' => 'Delete fieldmap',
    'description' => 'Delete an existing fieldmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_api_fieldmap_delete_form', 4),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_CALLBACK,
    'file' => 'salesforce_api.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function salesforce_api_perm() {
  return array('administer salesforce');
}

/**
 * Creates an object used for communicating with the Salesforce server and
 *   performs a login to verify the API credentials.
 *
 * @param $username
 *   Uername for Salesforce. An email address, most likely. If none passed, 
 *     sitewide creds will be used
 * @param $password
 *   Password to Salesforce account.
 * @param $token
 *   Security token from Salesforce.
 * @param $reconnect
 *   By default, subsequent calls to this function will return the same, already
 *     connected Salesforce object as preceding calls. Setting this variable to
 *     TRUE will cause a new connection to be established instead.
 * @return
 *   The DrupalSalesforce object used to communicate with the Salesforce server
 *     if successful or FALSE if a connection could not be established.
 */
function salesforce_api_connect($username = FALSE, $password = FALSE, $token = FALSE, $reconnect = FALSE) {
  static $sf = FALSE;

  // Return the previously connected object.
  if ($sf && !$reconnect) {
    return $sf;
  }

  // Load up the sitewide API credentials if no others were provided:
  $username = $username ? $username : variable_get('salesforce_api_username', '');
  $password = $password ? $password : variable_get('salesforce_api_password', '');
  $token = $token ? $token : variable_get('salesforce_api_token', '');

  // Fail early if we didn't receive an API username, password, or token.
  if (empty($username) || empty($password) || empty($token)) {
    watchdog('salesforce', 'Connection to Salesforce failed because API credentials have not been set.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Include the file that defines the class.
  require_once(drupal_get_path('module', 'salesforce_api') .'/salesforce.class.inc');

  // Create a new Salesforce object with the API credentials.
  $sf = new DrupalSalesforce($username, $password, $token);

  // Attempt a login, and...
  if ($sf->login()) {
    // Return the object if a connection and login were successful.
    return $sf;
  }
  else {
    // Or return FALSE to indicate the failure.
    $sf = FALSE;

    return FALSE;
  }
}

/**
 * Implementation of hook_fieldmap_objects().
 *
 * This will pull a cached version (if possible) of the available SF fields for
 * the object(s) in question. Prevent excess querying!
 */
function salesforce_api_fieldmap_objects($type) {
  $objects = array();
  // Define the data fields available for Salesforce objects.
  if ($type == 'salesforce') {
    $cache = cache_get('salesforce_api_sf_objects');
    if ($cache->data == '') {
      $sf_objects = variable_get('salesforce_api_enabled_objects', array('Campaign', 'Contact', 'Lead'));
      $sf = salesforce_api_connect();
      $result = $sf->client->describeSObjects($sf_objects);
      foreach ($result as $key => $object) {
        $objects[$sf_objects[$key]] = array(
          'label' => t($sf_objects[$key]),
          'fields' => array(),
        );
        foreach ($object->fields as $field) {
          $objects[$sf_objects[$key]]['fields'][$field->name] = array(
            'label' => t($field->label),
          );
          if ($field->createable != 1) {
            $objects[$sf_objects[$key]]['fields'][$field->name]['type'] = SALESFORCE_FIELD_SOURCE_ONLY;
          }
          elseif ($field->nillable != 1 && $field->defaultedOnCreate != 1) {
            $objects[$sf_objects[$key]]['fields'][$field->name]['type'] = SALESFORCE_FIELD_REQUIRED;
          }
        }
      }
      cache_set('salesforce_api_sf_objects', $objects);
    }
    else {
      $objects = $cache->data;
    }
  }

  return $objects;
}

// Returns an array of system fields that are retrievable from Salesforce.
function salesforce_api_fieldmap_system_fields() {
  $fields = array(
    'Id' => array('label' => t('Salesforce ID')),
    'IsDeleted' => array('label' => t('Is the object deleted?')),
    'CreatedById' => array('label' => t('User ID of the creator')),
    'CreatedDate' => array('label' => t('Creation date and time')),
    'LastModifiedById' => array('label' => t('User ID of the last modifier')),
    'LastModifiedDate' => array('label' => t('Last user modification date and time')),
    'SystemModstamp' => array('label' => t('Last user or system modification date and time')),
  );

  return $fields;
}


/**
 * Saves a fieldmap to the database.
 *
 * @param $map;
 *   An array containing the fieldmap data using the following keys and values:
 *   - fieldmap: the numeric index of the fieldmap.
 *   - drupal: the name of a Drupal object.
 *   - salesforce: the name of a Salesforce object.
 *   - action: the action this fieldmap is used for; 'import' or 'export'.
 *   - automatic: whether or not the sync should be automatic
 *   - fields: an array that maps source fields (as keys) to their corresponding
 *       target fields (as values).
 */
function salesforce_api_fieldmap_save(&$map) {
  if ($map['fieldmap']) {
    $primary_keys = array('fieldmap');
  }
  if (is_array($map['fields'])) {
    $map['fields'] = serialize($map['fields']);
  }
  drupal_write_record('salesforce_field_map', $map, $primary_keys);
}

/**
 * Loads a fieldmap from the database.
 *
 * @param $fieldmap
 *   The index of the fieldmap to load.
 * @return
 *   An array containing the fieldmap data.
 */
function salesforce_api_fieldmap_load($fieldmap) {
  static $maps;
  if (!isset($maps[$fieldmap]) && $fieldmap != '') {
    $result = db_query("SELECT * FROM {salesforce_field_map} WHERE fieldmap = %d", $fieldmap);
    $map = db_fetch_array($result);
    $map['fields'] = unserialize($map['fields']);
    $maps[$fieldmap] = $map;
  }

  return $maps[$fieldmap];
}

/**
 * Clones a fieldmap, updating fields as necessary for a change in action.
 *
 * @param $fieldmap
 *   The index of the fieldmap to clone.
 * @param $action
 *   The action to switch to for the cloned fieldmap.
 * @return
 *   The newly created fieldmap or FALSE if the clone failed.
 */
function salesforce_api_fieldmap_clone($fieldmap, $action) {
  // Load the fieldmap from the database.
  $map = salesforce_api_fieldmap_load($fieldmap);

  // Return FALSE if the source fieldmap does not exist.
  if (empty($map)) {
    return FALSE;
  }

  // Switch the action and update the fields if necessary.
  if ($map['action'] != $action) {
    $map['action'] = $action;
    $fields = array();

    // Loop through all the fields to reverse the associations.
    foreach ($map['fields'] as $key => $value) {
      // If a value hasn't been set for the old source field, set it now.
      if (empty($fields[$value])) {
        $fields[$value] = $key;
      }
    }

    // Update the fieldmap with the new fields array.
    $map['fields'] = $fields;
  }

  // Save the new fieldmap and return its index.
  salesforce_api_fieldmap_save($map);

  return $map;
}

/**
 * Deletes a fieldmap from the database.
 *
 * @param $fieldmap
 *   The index of the fieldmap to delete.
 */
function salesforce_api_fieldmap_delete($fieldmap) {
  db_query("DELETE FROM {salesforce_field_map} WHERE fieldmap = %d", $fieldmap);
  db_query("DELETE FROM {salesforce_object_map} WHERE fieldmap = %d", $fieldmap);
}

/**
 * Returns an array of fieldmaps for use as options in the Forms API.
 *
 * @param $action
 *   Filters the fieldmaps by action.
 * @param $drupal
 *   Filters the fieldmaps by Drupal object.
 * @param $salesforce
 *   Filters the fieldmaps by Salesforce object.
 * @param $automatic
 *   Optional: Filter the fieldmaps to only pull those marked automatic.
 * @return
 *   A FAPI options array of all the matching fieldmaps.
 */
function salesforce_api_fieldmap_options($drupal = NULL, $salesforce = NULL, $automatic = FALSE) {
  $options = array();
  
  $result = db_query("SELECT fieldmap, drupal, salesforce FROM {salesforce_field_map}");
  while ($map = db_fetch_array($result)) {

    // Skip the fieldmap if it is not for the appropriate Drupal object.
    if (!empty($drupal) && $map['drupal'] != $drupal) {
      continue;
    }

    // Skip the fieldmap if it is not for the appropriate Salesforce object.
    if (!empty($salesforce) && $map['salesforce'] != $salesforce) {
      continue;
    }

    // Setup some replacement args for the label.
    $args = array(
      '@drupal' => salesforce_api_fieldmap_object_label('drupal', $map['drupal']),
      '@salesforce' => salesforce_api_fieldmap_object_label('salesforce', $map['salesforce']),
    );

    $options[$map['fieldmap']] = t('Drupal @drupal to Salesforce @salesforce', $args);
  }

  return $options;
}

/**
 * Returns all or a subset of the objects defined via hook_sf_fieldmap().
 *
 * @param $type
 *   Specify a type to filter the return value to objects of that type.
 * @param $name
 *   Specify an object name to filter the return value to that object alone.
 *     If this parameter is supplied, you must specify the correct type as well.
 * @return
 *   An array of all objects sorted by type with no arguments.  Otherwise an
 *     array of objects filtered as specified by the parameters.
 */
function salesforce_api_fieldmap_objects_load($type = NULL, $name = NULL) {
  static $objects = array();

  // If we have not yet cached the object definitions...
  if (empty($objects)) {
    // Find all the Drupal objects defined by hook_sf_fieldmap().
    $objects['drupal'] = module_invoke_all('fieldmap_objects', 'drupal');

    // Get all the Salesforce objects defined by hook_sf_fieldmap().
    $objects['salesforce'] = module_invoke_all('fieldmap_objects', 'salesforce');

    // Allow other modules to modify the object definitions.
    foreach (module_implements('fieldmap_objects_alter') as $module) {
      $function = $module .'_fieldmap_objects_alter';
      $function($objects);
    }
  }

  // If a particular object type was specified...
  if (!empty($type)) {
    // And a particular object was specified...
    if (!empty($name)) {
      // Return that object definition if it exists or FALSE if it does not.
      if (isset($objects[$type][$name])) {
        return $objects[$type][$name];
      }
      else {
        return FALSE;
      }
    }
    else {
      // If no object was specified, return all objects of the specified type or
      // FALSE if the type does not exist
      if (isset($objects[$type])) {
        return $objects[$type];
      }
      else {
        return FALSE;
      }
    }
  }


  return $objects;
}

// Returns the label for the object of the specified type and name.
function salesforce_api_fieldmap_object_label($type, $name) {
  // Get the object definition.
  $object = salesforce_api_fieldmap_objects_load($type, $name);

  // If no label is specified, return the object name.
  if (empty($object['label'])) {
    return check_plain($name);
  }

  return $object['label'];
}

// Returns a string of description text for the specified fieldmap.
function salesforce_api_fieldmap_description() {
  return t('Fieldmap @index maps Salesforce %salesforce objects to Drupal %drupal objects.', array('@index' => $map['fieldmap'], '%drupal' => salesforce_api_fieldmap_object_label('drupal', $map['drupal']), '%salesforce' => salesforce_api_fieldmap_object_label('salesforce', $map['salesforce'])));
}

/**
 * Returns a FAPI options array for specifying a field from the source object to
 *   associate with the target field.
 *
 * @param $object
 *   The source object whose fields we need to filter into the options array.
 * @param $type
 *   The type of the target field's object.
 * @param $name
 *   The name of the target object.
 * @param $field
 *   The name of the target field.
 * @return
 *   A FAPI options array of all the available fields that can map to the
 *     target field.
 */
function salesforce_api_fieldmap_field_options($object, $type = NULL, $name = NULL, $field = NULL) {
  // Define the options array with a blank value.
  $options = array('' => '');

  // TODO: Consider filtering these based on the object definition.  For now
  // this function simply uses any field defined for the source object.

  // Loop through all the fields of the source object.
  foreach ($object['fields'] as $key => $data) {
    // Add the field to the options array in the right options group.
    if (!empty($data['group'])) {
      $options[$data['group']][$key] = $data['label'];
    }
    else {
      $options[t('Core fields')][$key] = $data['label'];
    }
  }

  return $options;
}

/**
 * Creates an object for export to Salesforce based on the supplied source
 *   object and fieldmap.
 *
 * @param $fieldmap
 *   The index of the fieldmap used to filter the source object into the export.
 * @param $source
 *   The source object used to generate the export.
 * @return
 *   An object of the source type ready for export to Salesforce or FALSE if
 *     the operation failed.
 */
function salesforce_api_fieldmap_export_create($fieldmap, $source = NULL) {
  // Load the fieldmap from the database.
  $map = salesforce_api_fieldmap_load($fieldmap);

  // Fail if the fieldmap does not exist.
  if (!$map) {
    return FALSE;
  }

  // Load the source object definition so we know how to get values for its
  // various fields.
  if ($map['action'] == 'import') {
    $source_object = salesforce_api_fieldmap_objects_load('salesforce', $map['salesforce']);
  }
  else {
    $source_object = salesforce_api_fieldmap_objects_load('drupal', $map['drupal']);
  }

  $object = new stdClass();

  // Loop through the fields on the fieldmap.
  foreach ($map['fields'] as $key => $value) {
    // If a handler is specified for retrieving a value for the source field...
    if (isset($source_object['fields'][$value]['export'])) {
      // Get the value for the field from the handler function.
      $object->$key = $source_object['fields'][$value]['export']($source, $value);
    }
    elseif (isset($source->$value)) {
      // Otherwise set the field on the export object to the value of the source
      // field if it's present on the source object.
      $object->$key = $source->$value;
    }
  }

  return $object;
}

/**
 * Loads the Salesforce ID and fieldmap index of a Drupal object.
 *
 * @param $type
 *   The type of the Drupal object you are requesting data for; node or user.
 * @param $id
 *   The associated unique ID used to identify the object in Drupal.
 * @return
 *   An array containing the associated Salesforce object type and ID or an
 *     empty array if no data was found.
 */
function salesforce_api_id_load($type, $id) {
  // Query the main ID table for the associated data.
  $result = db_query("SELECT sfid, fieldmap FROM {salesforce_object_map} WHERE drupal_type = '%s' AND oid = %d", $type, $id);

  // Return an empty array if no data was found.
  if (!$data = db_fetch_array($result)) {
    return array();
  }
  else {
    // Otherwise return the Salesforce object type and ID.
    return $data;
  }
}

/**
 * Saves the Salesforce ID and fieldmap index of a Drupal object.
 *
 * @param $drupal_type
 *   The type of the Drupal object you are requesting data for; node or user.
 * @param $oid
 *   The associated unique ID used to identify the object in Drupal.
 * @param $sfid
 *   The Salesforce ID of the associated object in the Salesforce database.
 * @param $fieldmap
 *   The index of the fieldmap used to generate the export.
 */
function salesforce_api_id_save($drupal_type, $oid, $sfid, $fieldmap) {
  db_query("DELETE FROM {salesforce_object_map} WHERE drupal_type = '%s' AND oid = %d", $drupal_type, $oid);
  db_query("INSERT INTO {salesforce_object_map} (drupal_type, oid, sfid, fieldmap) VALUES ('%s', %d, '%s', %d)", $drupal_type, $oid, $sfid, $fieldmap);
}

/**
 * Implementation of hook_theme().
 *
 * Registers theme callback for admin screen
 */
function salesforce_api_theme($existing, $type, $theme, $path) {
  return array(
    'salesforce_api_fieldmap_edit_form_table' => array(
      'file' => 'salesforce_api.admin.inc',
      'arguments' => array('form' => NULL),
    ),
  );
}
